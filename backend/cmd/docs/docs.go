// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Alex \"bustard\" Provor",
            "url": "https://breezy.su",
            "email": "admin@breezy.su"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/client/reload": {
            "post": {
                "description": "log count clients",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "websocket"
                ],
                "summary": "Broadcast all clients after reload screens",
                "responses": {
                    "202": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/color/all": {
            "get": {
                "description": "Returns all color documents.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "colors"
                ],
                "summary": "List colors",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/echo.SWGColor"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/color/create": {
            "post": {
                "description": "Creates a new color document; server generates UUID and returns it as ` + "`" + `id` + "`" + `.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "colors"
                ],
                "summary": "Create color",
                "parameters": [
                    {
                        "description": "Color payload",
                        "name": "color",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/echo.SWGColor"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGCreatedID"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/color/delete": {
            "delete": {
                "description": "Deletes a color document by its UUID (` + "`" + `id` + "`" + `).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "colors"
                ],
                "summary": "Delete color by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Color ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/color/get": {
            "get": {
                "description": "Returns a single color document by UUID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "colors"
                ],
                "summary": "Get color by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Color ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGColor"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/color/rewrite": {
            "put": {
                "description": "Rewrites (replaces) a color document by UUID. ` + "`" + `_id` + "`" + ` is preserved on server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "colors"
                ],
                "summary": "Update (rewrite) color by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Color ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Fields to write (document is replaced except for _id)",
                        "name": "color",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/echo.SWGColor"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/color/update": {
            "patch": {
                "description": "Partially updates fields of a color document by UUID using ` + "`" + `$set` + "`" + `; ` + "`" + `_id` + "`" + ` is preserved.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "colors"
                ],
                "summary": "Partially update color by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Color ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Fields to set",
                        "name": "color",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/echo.SWGColor"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/element/all": {
            "get": {
                "description": "Returns all element documents.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "elements"
                ],
                "summary": "List elements",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/echo.SWGElement"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/element/create": {
            "post": {
                "description": "Creates a new element document; server generates UUID and returns it as ` + "`" + `id` + "`" + `.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "elements"
                ],
                "summary": "Create element",
                "parameters": [
                    {
                        "description": "Element payload",
                        "name": "element",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/echo.SWGElement"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGCreatedID"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/element/delete": {
            "delete": {
                "description": "Deletes an element document by its UUID (` + "`" + `id` + "`" + `). STAT: delete all info about this element",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "elements"
                ],
                "summary": "Delete element by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Element ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/element/get": {
            "get": {
                "description": "Returns a single element document by UUID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "elements"
                ],
                "summary": "Get element by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Element ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGElement"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/element/rewrite": {
            "put": {
                "description": "Rewrites (replaces) an element document by UUID. ` + "`" + `_id` + "`" + ` is preserved on server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "elements"
                ],
                "summary": "Update (rewrite) element by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Element ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Fields to write (document is replaced except for _id)",
                        "name": "element",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/echo.SWGElement"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/element/update": {
            "patch": {
                "description": "Partially updates fields of an element document by UUID using ` + "`" + `$set` + "`" + `; ` + "`" + `_id` + "`" + ` is preserved.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "elements"
                ],
                "summary": "Partially update element by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Element ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Fields to set",
                        "name": "element",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/echo.SWGElement"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/screen/all": {
            "get": {
                "description": "Returns all screen documents.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "screens"
                ],
                "summary": "List screens",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/echo.SWGScreen"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/screen/create": {
            "post": {
                "description": "Creates a new screen document; server generates UUID and returns it as ` + "`" + `id` + "`" + `.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "screens"
                ],
                "summary": "Create screen",
                "parameters": [
                    {
                        "description": "Screen payload",
                        "name": "screen",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/echo.SWGScreen"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGCreatedID"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/screen/delete": {
            "delete": {
                "description": "Deletes a screen document by its UUID (` + "`" + `id` + "`" + `). STAT: delete all info about this screen",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "screens"
                ],
                "summary": "Delete screen by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Screen ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/screen/get": {
            "get": {
                "description": "Returns a single screen document by UUID. STAT: Increment screenReceiving for this screen",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "screens"
                ],
                "summary": "Get screen by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Screen ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGScreen"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/screen/rewrite": {
            "put": {
                "description": "Updates fields of a screen document by UUID using ` + "`" + `$set` + "`" + ` semantics.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "screens"
                ],
                "summary": "Update (rewrite) screen by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Screen ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Fields to set",
                        "name": "screen",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/echo.SWGScreen"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/screen/update": {
            "patch": {
                "description": "Partially updates fields of a screen document by UUID using ` + "`" + `$set` + "`" + `; ` + "`" + `_id` + "`" + ` is preserved.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "screens"
                ],
                "summary": "Partially update screen by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Screen ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Fields to set",
                        "name": "screen",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/echo.SWGScreen"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/stats/all": {
            "get": {
                "description": "Returns all statistics maps: screen receiving, element clicks, screen clicks.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get aggregated statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGStats"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/stats/click/element": {
            "post": {
                "description": "Sets click count for element ID. Intended for client-side aggregated writes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Set element click count",
                "parameters": [
                    {
                        "description": "Element click payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/echo.SWGSetClickElementReq"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/api/stats/click/screen": {
            "post": {
                "description": "Sets (upserts) click count for screen ID. Intended for client-side aggregated writes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Set screen click count",
                "parameters": [
                    {
                        "description": "Screen click payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/echo.SWGSetClickScreenReq"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.SWGError"
                        }
                    }
                }
            }
        },
        "/ws": {
            "get": {
                "description": "web socket connection! \"ws://\u003cip\u003e:8080/ws?id=\u003cid\u003e\"",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "websocket"
                ],
                "summary": "subscribe client to updates \"ws://\u003cip\u003e:8080/ws?id=\u003cid\u003e\"",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Screen ID (UUID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "echo.SWGColor": {
            "type": "object",
            "additionalProperties": true
        },
        "echo.SWGCreatedID": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "echo.SWGElement": {
            "type": "object",
            "additionalProperties": true
        },
        "echo.SWGError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "description of error"
                }
            }
        },
        "echo.SWGScreen": {
            "type": "object",
            "additionalProperties": true
        },
        "echo.SWGSetClickElementReq": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 3
                },
                "elementId": {
                    "type": "string",
                    "example": "4d0f18d6-dc4a-4f5d-8b5b-6e9a8a8d9b01"
                }
            }
        },
        "echo.SWGSetClickScreenReq": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 12
                },
                "screenId": {
                    "type": "string",
                    "example": "3b2c6f55-1e9e-44e7-8a7e-7f3c5d8a1b23"
                }
            }
        },
        "echo.SWGStats": {
            "type": "object",
            "properties": {
                "clickElements": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "clickScreens": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "screenReceiving": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "--dev--",
	Host:             "31.56.205.210:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "bdUI REST API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
