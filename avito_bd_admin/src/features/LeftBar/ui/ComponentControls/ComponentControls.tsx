// features/Builder/ui/ComponentControls/ComponentControls.tsx
import React from "react";
import { useBuilder } from "../../../Builder/lib/builderContext";
import styles from "./ComponentControls.module.css";
import type { UIComponent } from "../../../../entities/components/model/componentTypes";
import Button from "../../../../shared/ui/Button/Button";


export const ComponentControls: React.FC = () => {
  const {
    screen,
    selectedComponentId,
    deleteComponent,
    moveComponent,
  } = useBuilder();

  const handleMoveUp = () => {
    if (selectedComponentId) {
      moveComponent(selectedComponentId, "up");
    }
  };

  const handleMoveDown = () => {
    if (selectedComponentId) {
      moveComponent(selectedComponentId, "down");
    }
  };

  if (!selectedComponentId) {
    return (
      <div className={styles.container}>
        <div className={styles.placeholder}>
          üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        </div>
        <div className={styles.hint}>
          –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –µ–≥–æ
        </div>
      </div>
    );
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ –≤—Å–µ–º—É –¥–µ—Ä–µ–≤—É
  const findComponentInTree = (
    components: UIComponent[],
    targetId: string
  ): UIComponent | null => {
    for (const comp of components) {
      if (comp._id === targetId) return comp;

      if ("children" in comp && comp.children) {
        const found = findComponentInTree(comp.children, targetId);
        if (found) return found;
      }
    }
    return null;
  };


  const handleDelete = () => {
    if (confirm("–£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç?")) {
      deleteComponent(selectedComponentId);
    }
  };

  return (
    <div className={styles.container}>
      {/* <div className={styles.header}>
        <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º</h3>
        <div className={styles.componentId}>ID: {selectedComponentId}</div>
        <div className={styles.componentType}>
          –¢–∏–ø: {selectedComponent?.type || "unknown"}
        </div>
      </div> */}

      <div className={styles.controls}>
        <div className={styles.section}>
          <h4>–î–µ–π—Å—Ç–≤–∏—è</h4>
          <div className={styles.actions}>
            <Button onClick={handleDelete} style={{background:"#e12323"}}>
              üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
            </Button>
            <Button onClick={handleMoveUp} >
              ‚Üë –í–≤–µ—Ä—Ö
            </Button>
            <Button onClick={handleMoveDown} >
              ‚Üì –í–Ω–∏–∑
            </Button>
          </div>
        </div>

        <div className={styles.section}>
          <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
          <div className={styles.info}>
            <p>‚Ä¢ –ö–ª–∏–∫ - –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞</p>
            <p>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</p>
            <p>‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ - –∫–Ω–æ–ø–∫–∞ –≤—ã—à–µ</p>
          </div>
        </div>

        {/* {selectedComponent?.type === "text" && (
          <div className={styles.section}>
            <h4>–¢–µ–∫—Å—Ç</h4>
            <div className={styles.textContent}>
              {(selectedComponent as any).text}
            </div>
          </div>
        )}

        {selectedComponent?.type === "button" && (
          <div className={styles.section}>
            <h4>–ö–Ω–æ–ø–∫–∞</h4>
            <div className={styles.textContent}>
              –¢–µ–∫—Å—Ç: {(selectedComponent as any).text}
            </div>
          </div>
        )} */}
      </div>
    </div>
  );
};
