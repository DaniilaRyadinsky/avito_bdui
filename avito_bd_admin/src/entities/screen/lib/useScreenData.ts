import { useState, useEffect } from "react";
import type { SnackbarComponent, UIComponent } from "../../components/model/componentTypes";
import type { UIScreen, RawUIScreen } from "../model/screenTypes";


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID –≤—Å–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
function ensureAllComponentsHaveIds(screen: UIScreen): UIScreen {
  const addMissingIds = (component: UIComponent, path: string): UIComponent => {
    const withId = {
      ...component,
      _id:
        component._id ||
        `comp-${path}-${Math.random().toString(36).substr(2, 9)}`,
    };

    if ("children" in withId && withId.children) {
      return {
        ...withId,
        children: withId.children.map((child, index) =>
          addMissingIds(child, `${path}-${index}`)
        ),
      };
    }

    return withId;
  };

  return {
    ...screen,
    topBar: (screen.topBar || []).map((comp, index) =>
      addMissingIds(comp, `topbar-${index}`)
    ),
    content: (screen.content || []).map((comp, index) =>
      addMissingIds(comp, `content-${index}`)
    ),
    bottomBar: (screen.bottomBar || []).map((comp, index) =>
      addMissingIds(comp, `bottombar-${index}`)
    ),
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É RawUIScreen
function adaptServerData(serverData: any): RawUIScreen | null {
  if (!serverData) return null;

  console.log("üîÑ Adapting server data:", serverData);

  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω (—É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
  if (serverData._id === "new" && serverData.type === "screen") {
    return serverData;
  }

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ RawUIScreen
  if (serverData.type === "screen" && serverData._id) {
    return serverData;
  }

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ data —Å —ç–∫—Ä–∞–Ω–æ–º
  if (serverData.data && serverData.data.type === "screen") {
    return serverData.data;
  }

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –Ω–∞–ø—Ä—è–º—É—é —Å —Å–µ—Ä–≤–µ—Ä–∞ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ JSON)
  if (serverData._id && serverData.type === "screen") {
    return serverData;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
  if (serverData._id || serverData.id) {
    return {
      type: "screen",
      _id: serverData._id || serverData.id,
      name: serverData.name || "Unnamed Screen",
      background: serverData.background || "#FFFFFF",
      topBar: serverData.topBar || [],
      content: serverData.content || [],
      bottomBar: serverData.bottomBar || [],
      snackbars: serverData.snackbars || [],
    };
  }

  console.warn("‚ùå Unknown data format:", serverData);
  return null;
}

export function useScreenData(initialData: any): UIScreen | null {
  const [screen, setScreen] = useState<UIScreen | null>(null);

  useEffect(() => {
    try {
      const adaptedData = adaptServerData(initialData);

      if (!adaptedData) {
        setScreen(null);
        return;
      }

      const screen: UIScreen = {
        type: "screen",
        _id: adaptedData._id || "default",
        name: adaptedData.name || "Default Screen",
        width: adaptedData.width,
        height: adaptedData.height,
        background: adaptedData.background || "#FFFFFF",
        topBar: adaptedData.topBar as unknown as UIComponent[] || [],
        content: adaptedData.content as unknown as UIComponent[] || [],
        bottomBar: adaptedData.bottomBar as unknown as UIComponent[] || [],
        snackbars: adaptedData.snackbars as unknown as SnackbarComponent[] || [],
      };

      const screenWithIds = ensureAllComponentsHaveIds(screen);

      setScreen(screenWithIds);
    } catch (error) {
      console.error("‚ùå useScreenData error:", error);
      setScreen(null);
    }
  }, [initialData]);

  return screen;
}
